;; -*- mode: emacs-lisp; lexical-binding: t -*-
(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   dotspacemacs-configuration-layers
   '(
     auto-completion
     better-defaults
     emacs-lisp
     git
     helm
     (markdown :variables
               markdown-live-preview-engine 'vmd)
     multiple-cursors
     (org :variables
          org-refile-targets '(("~/Documents/org/archive/ArchiveMisc.org" :maxlevel . 1)
                               ("~/Documents/org/archive/ArchiveWork.org" :maxlevel . 1))
          org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)"))
          org-tag-alist '((:startgroup . nil)
                          ("@priority" . ?p) ("@future" . ?f)
                          (:endgroup . nil)
                          ("@quick" . ?q) ("@memory" . ?m))
          org-roam-completion-everywhere t
          org-roam-directory "~/Documents/org/"
          org-roam-capture-templates
          '(("d" "default" plain "%?"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n")
             :unnarrowed t
             )
            ("p" "project" plain
             (file "~/Documents/org/templates/ProjectTemplate.org")
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: Project\n#+category: ${title}\n")
             :unnarrowed t
             )
            ("s" "secure" plain "%?"
             :if-new (file+head "~/Documents/org/safe/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: Safe\n")
             :unnarrowed t
             )
            ("h" "human" plain
             (file "~/Documents/org/templates/HumanTemplate.org")
             :if-new (file+head "~/Documents/org/people/Czechia/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: Human\n")
             :unnarrowed t
             )
            ("c" "concept" plain
             (file "~/Documents/org/templates/ConceptTemplate.org")
             :if-new (file+head "~/Documents/org/concepts/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+filetags: Concept\n")
             :unnarrowed t
             )
            ("b" "bibliography" plain
             (file "~/Documents/org/templates/BibliographyTemplate.org")
             :if-new (file+head "~/Documents/org/bibliography/%<%Y%m%d%H%M%S>-${slug}.org"
                                "#+title: ${title}\n#+subtitle: %^\n#+filetags: Bibliography\n")
             :unnarrowed t)
            )
          org-startup-indented t
          org-ellipsis " â–¾"
          org-hide-emphasis-markers t
          org-log-into-drawer t
          org-agenda-start-with-log-mode t
          org-enable-roam-support t
          org-enable-org-journal-support t
          org-journal-dir "~/Documents/org/journal/"
          org-journal-file-header (with-temp-buffer
                                    (insert-file-contents "~/Documents/org/templates/JournalTemplate.org")
                                    (buffer-string))
          org-journal-file-format "%Y-%m-%d.org"
          org-journal-date-format "Notes"
          org-journal-date-prefix "* "
          org-journal-time-prefix "** "
          org-journal-time-format ""
          )
     semantic
     spell-checking
     syntax-checking
     treemacs
     version-control
     )
   dotspacemacs-additional-packages '()
   dotspacemacs-frozen-packages '()
   dotspacemacs-excluded-packages '()
   dotspacemacs-install-packages 'used-only))
(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  (setq-default
   dotspacemacs-enable-emacs-pdumper nil
   dotspacemacs-emacs-pdumper-executable-file "emacs"
   dotspacemacs-emacs-dumper-dump-file (format "spacemacs-%s.pdmp" emacs-version)
   dotspacemacs-elpa-https t
   dotspacemacs-elpa-timeout 5
   dotspacemacs-gc-cons '(100000000 0.1)
   dotspacemacs-read-process-output-max (* 1024 1024)
   dotspacemacs-use-spacelpa nil
   dotspacemacs-verify-spacelpa-archives t
   dotspacemacs-check-for-update t
   dotspacemacs-elpa-subdirectory 'emacs-version
   dotspacemacs-editing-style 'vim
   dotspacemacs-startup-buffer-show-version t
   dotspacemacs-startup-banner 'nil
   dotspacemacs-startup-lists '((recents . 3)
                                (todos . 12)
                                (agenda . 5))
   dotspacemacs-startup-buffer-responsive t
   dotspacemacs-show-startup-list-numbers t
   dotspacemacs-startup-buffer-multi-digit-delay 0.4
   dotspacemacs-new-empty-buffer-major-mode 'text-mode
   dotspacemacs-scratch-mode 'text-mode
   dotspacemacs-scratch-buffer-persistent nil
   dotspacemacs-scratch-buffer-unkillable nil
   dotspacemacs-initial-scratch-message nil
   dotspacemacs-themes '(
                         spacemacs-dark
                         spacemacs-light
                         )
   dotspacemacs-mode-line-theme '(doom)
   dotspacemacs-colorize-cursor-according-to-state nil
   dotspacemacs-default-font '("JetBrainsMono Nerd Font Mono"
                               :size 11.0
                               :weight normal
                               :width normal
                               :powerline-scale 1.5)
   dotspacemacs-leader-key "SPC"
   dotspacemacs-emacs-command-key "SPC"
   dotspacemacs-ex-command-key ":"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key (if window-system "<M-return>" "C-M-m")
   dotspacemacs-distinguish-gui-tab nil
   dotspacemacs-default-layout-name "Default"
   dotspacemacs-display-default-layout nil
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-auto-generate-layout-names nil
   dotspacemacs-large-file-size 1
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-max-rollback-slots 5
   dotspacemacs-enable-paste-transient-state nil
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-switch-to-buffer-prefers-purpose nil
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup t
   dotspacemacs-undecorated-at-startup nil
   dotspacemacs-active-transparency 95
   dotspacemacs-inactive-transparency 95
   dotspacemacs-show-transient-state-title t
   dotspacemacs-show-transient-state-color-guide t
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-smooth-scrolling t
   dotspacemacs-scroll-bar-while-scrolling t
   dotspacemacs-line-numbers '(:disabled-for-modes dired-mode
                                                   doc-view-mode
                                                   markdown-mode
                                                   org-mode
                                                   pdf-view-mode
                                                   text-mode)
   dotspacemacs-folding-method 'evil
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-activate-smartparens-mode t
   dotspacemacs-smart-closing-parenthesis nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-enable-server nil
   dotspacemacs-server-socket-dir nil
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")
   dotspacemacs-frame-title-format "%I@%S"
   dotspacemacs-icon-title-format nil
   dotspacemacs-show-trailing-whitespace t
   dotspacemacs-whitespace-cleanup nil
   dotspacemacs-use-clean-aindent-mode t
   dotspacemacs-use-SPC-as-y nil
   dotspacemacs-swap-number-row nil
   dotspacemacs-zone-out-when-idle nil
   dotspacemacs-pretty-docs nil
   dotspacemacs-home-shorten-agenda-source t
   dotspacemacs-byte-compile nil))
(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))
(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  )
(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump.")
(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."
  (spacemacs/toggle-fill-column-indicator-globally-on)
  (spacemacs/toggle-hungry-delete-on)
  (org-roam-db-autosync-enable)
  (spacemacs/enable-transparency)
  (setq visual-line-mode t)
  (setq menu-bar-mode t)
  (setq TeX-source-correlate-mode t
        TeX-source-correlate-start-server t
        TeX-source-correlate-method 'synctex
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-view-program-selection '((output-pdf "PDF Tools")))
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  (defun org-mode-prettify ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t
          visual-line-mode t)
    (visual-fill-column-mode 1))
  (with-eval-after-load 'org
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (add-hook 'org-mode-hook 'org-mode-prettify)
    )
  (defun org-journal-find-location ()
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  (setq org-capture-templates '(("j" "Journal entry" entry (function org-journal-find-location)
                                 "** %^{Title}\n%i%?"
                                 :jump-to-captured t :immediate-finish t)))
  (setq gc-cons-threshold (* 100 1024 1024))
  (setq comp-speed 2)
  (menu-bar-mode t)
  )
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
  (custom-set-variables
   '(evil-want-Y-yank-to-eol nil)
   '(org-agenda-files
     '("~/Documents/org/20240123145223-numerical_computation.org" "~/Documents/org/20240119151159-randomised_algos.org" "~/Documents/org/20230901132351-cxl.org" "~/Documents/org/20240118112914-applied_ml.org" "~/Documents/org/20220608112910-misc.org" "~/Documents/org/20230830143252-big_data_systems.org" "~/Documents/org/20220608113428-work.org" "~/Documents/org/20230905155419-mind_virtualization.org" "~/Documents/org/20230901143056-theory_of_distributed_systems.org" "~/Documents/org/20230831143918-software_analysis_verification.org"))
   '(package-selected-packages
     '(evil-tex consult lsp-treemacs lsp-mode ox-pandoc company-lua lua-mode lsp-ui helm-lsp texfrag doom-modeline shrink-path flycheck-ledger evil-ledger ledger-mode org-journal srefactor yapfify stickyfunc-enhance sphinx-doc pytest pyenv-mode pydoc py-isort poetry pippel pipenv load-env-vars pyvenv pip-requirements nose lsp-python-ms lsp-pyright live-py-mode importmagic epc ctable concurrent helm-pydoc helm-cscope xcscope cython-mode company-anaconda blacken anaconda-mode pythonic org-roam compat d-mode company-dcd flycheck-dmd-dub tern npm-mode nodejs-repl livid-mode skewer-mode js2-refactor multiple-cursors js2-mode js-doc import-js grizzl gruvbox-theme autothemer proof-general company-coq web-mode web-beautify tagedit slim-mode scss-mode sass-mode pug-mode prettier-js impatient-mode simple-httpd helm-css-scss haml-mode emmet-mode counsel-css company-web web-completion-data add-node-modules-path mvn meghanada maven-test-mode groovy-mode groovy-imports pcache vmd-mode racket-mode helm-gtags ggtags counsel-gtags counsel swiper ivy company-quickhelp insert-shebang flycheck-bashate fish-mode company-shell org-ref citeproc queue lsp-latex helm-bibtex bibtex-completion parsebib company-reftex company-math math-symbol-lists company-auctex biblio biblio-core auctex opencl-mode glsl-mode cuda-mode company-glsl helm-rtags google-c-style gendoxy flycheck-ycmd flycheck-rtags disaster dap-mode bui cpp-auto-include company-ycmd ycmd request-deferred deferred company-rtags rtags company-c-headers ccls xterm-color vterm unfill treemacs-magit terminal-here smeargle shell-pop orgit-forge orgit org-rich-yank org-projectile org-category-capture org-present org-pomodoro alert log4e gntp org-mime org-download org-contrib org-cliplink org mwim multi-term mmm-mode markdown-toc lsp-origami origami htmlize helm-org-rifle helm-git-grep gnuplot gitignore-templates git-timemachine git-modes git-messenger git-link git-gutter-fringe fringe-helper git-gutter gh-md forge yaml markdown-mode magit ghub closql emacsql-sqlite emacsql treepy magit-section git-commit with-editor transient flyspell-correct-helm flyspell-correct flycheck-pos-tip pos-tip evil-org eshell-z eshell-prompt-extras esh-help browse-at-remote auto-dictionary yasnippet-snippets helm-company helm-c-yasnippet fuzzy company auto-yasnippet yasnippet ac-ispell auto-complete ws-butler writeroom-mode winum which-key volatile-highlights vi-tilde-fringe uuidgen use-package undo-tree treemacs-projectile treemacs-persp treemacs-icons-dired treemacs-evil toc-org symon symbol-overlay string-inflection string-edit spaceline-all-the-icons restart-emacs request rainbow-delimiters quickrun popwin pcre2el password-generator paradox overseer org-superstar open-junk-file nameless multi-line macrostep lorem-ipsum link-hint inspector info+ indent-guide hybrid-mode hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation helm-xref helm-themes helm-swoop helm-purpose helm-projectile helm-org helm-mode-manager helm-make helm-ls-git helm-flx helm-descbinds helm-ag google-translate golden-ratio font-lock+ flycheck-package flycheck-elsa flx-ido fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-textobj-line evil-surround evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-escape evil-ediff evil-easymotion evil-collection evil-cleverparens evil-args evil-anzu eval-sexp-fu emr elisp-slime-nav editorconfig dumb-jump drag-stuff dotenv-mode dired-quick-sort diminish define-word column-enforce-mode clean-aindent-mode centered-cursor-mode auto-highlight-symbol auto-compile aggressive-indent ace-link ace-jump-helm-line))
   '(warning-suppress-log-types
     '(((evil-collection))
       ((evil-collection))
       ((evil-collection))
       ((evil-collection))
       (ox-pandoc)
       (ox-pandoc)
       (org)
       ((evil-collection))
       ((evil-collection))
       (use-package)
       (use-package)
       (use-package)
       (use-package)
       (use-package)
       (use-package)
       ((evil-collection))
       (use-package)
       ((evil-collection))
       (use-package)
       (ox-pandoc)
       ((evil-collection))
       ((evil-collection))
       ((evil-collection))
       ((evil-collection))))
   '(warning-suppress-types
     '(((evil-collection))
       ((evil-collection))
       ((evil-collection))
       (ox-pandoc)
       (ox-pandoc)
       (org)
       ((evil-collection))
       ((evil-collection))
       (use-package)
       (use-package)
       (use-package)
       (use-package)
       (use-package)
       (use-package)
       ((evil-collection))
       (use-package)
       ((evil-collection))
       (use-package)
       (ox-pandoc)
       ((evil-collection))
       ((evil-collection))
       ((evil-collection))
       ((evil-collection)))))
  (custom-set-faces
   '(highlight-parentheses-highlight ((nil (:weight ultra-bold))) t))
  )
